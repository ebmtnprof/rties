newdata <- basedata#
  colnames(newdata)[colnames(newdata)== dyadId] <- "dyad"#
  colnames(newdata)[colnames(newdata)== personId] <- "person"#
  colnames(newdata)[colnames(newdata)== obs_name] <- "dv"#
  colnames(newdata)[colnames(newdata)== dist_name ] <- "dist1"#
#
  crossCorr <- list()#
  dID <- unique(factor(newdata$dyad))
length(dID)
for (i in 1:length(dID)){#
  datai <- newdata[newdata$dyad == dID[i], ]#
  dist1 <- subset(datai, dist1==1, select=dv)#
  dist0 <- subset(datai, dist1==0, select=dv)#
  crossCorr[[i]] <- Max_Min_CCF_Signed(dist0, dist1)#
  }
crossCorr
cctest <- as.data.frame(crossCorr)
head(cctest)
cc1 <- lapply(crossCorr, function(x) lapply(x, function(x) ifelse(is.null(x), NA, x)))
cc1
cc <- as.data.frame(do.call(rbind, crossCorr))
head(cc)
fix(c)
fix(cc)
cc$newID <- dID#
  colnames(cc) <- c("maxCor","maxLag", dyadId)
dim(cc)
temp1 <- basedata[!duplicated(basedata$person), ]#
  temp2 <- plyr::join(temp1, cc)
dim(temp2)
fix(temp2)
fix(cc)
fix(temp1)
fix(cc)
fix(temp2)
cc$couple
temp1$couple
temp2 <- plyr::join(cc, temp1)
fix(temp2)
data1 <- rties_ExampleData_2
Max_Min_CCF_Signed <- function (a, b) {#
d <- ccf(a, b, plot = FALSE, na.action=na.exclude)#
cor = d$acf[ ,,1] #
lag = d$lag[ ,,1] #
res = data.frame(cor,lag) #
for(i in 1:nrow(res)) if(is.na(res[i,1])) max=NA else {#
res_max = res[which.max(res$cor),] #
res_min = res[which.min(res$cor),]#
res_min_abs = abs(res_min)#
res.max.abs = which.max(c(res_max$cor, res_min_abs$cor))#
if (res.max.abs==1) max=res_max else max=res_min}#
output <<-data.frame(max = max)#
output#
}
basedata <- data1#
dyadId <- "couple"#
personId <- "person"#
obs_name <- "dial"#
dist_name <- "female"
newdata <- basedata#
  colnames(newdata)[colnames(newdata)== dyadId] <- "dyad"#
  colnames(newdata)[colnames(newdata)== personId] <- "person"#
  colnames(newdata)[colnames(newdata)== obs_name] <- "dv"#
  colnames(newdata)[colnames(newdata)== dist_name ] <- "dist1"#
#
  crossCorr <- list()#
  dID <- unique(factor(newdata$dyad))#
#
  for (i in 1:length(dID)){#
  datai <- newdata[newdata$dyad == dID[i], ]#
  dist1 <- subset(datai, dist1==1, select=dv)#
  dist0 <- subset(datai, dist1==0, select=dv)#
  crossCorr[[i]] <- Max_Min_CCF_Signed(dist0, dist1)#
  }
makeCrossCorr <- function(basedata, dyadId, personId, obs_name, dist_name){#
  newdata <- basedata#
  colnames(newdata)[colnames(newdata)== dyadId] <- "dyad"#
  colnames(newdata)[colnames(newdata)== personId] <- "person"#
  colnames(newdata)[colnames(newdata)== obs_name] <- "dv"#
  colnames(newdata)[colnames(newdata)== dist_name ] <- "dist1"#
#
  crossCorr <- list()#
  dID <- unique(factor(newdata$dyad))#
#
  for (i in 1:length(dID)){#
  datai <- newdata[newdata$dyad == dID[i], ]#
  dist1 <- subset(datai, dist1==1, select=dv)#
  dist0 <- subset(datai, dist1==0, select=dv)#
  crossCorr[[i]] <- Max_Min_CCF_Signed(dist0, dist1)#
  }#
#
  cc1 <- lapply(crossCorr, function(x) lapply(x, function(x) ifelse(is.null(x), NA, x)))#
  cc2 <- lapply(cc1, function(x) lapply(x, function(x) ifelse(is.numeric(x), round(x,digits=3), x)))#
  cc <- as.data.frame(do.call(rbind, crossCorr))#
  cc$newID <- dID#
  colnames(cc) <- c("maxCor","maxLag", dyadId)#
  temp1 <- basedata[!duplicated(basedata$person), ]#
  temp2 <- plyr::join(cc, temp1)#
  crossCorr <- temp2#
  return(crossCorr)#
 }
crossCorr <- makeCrossCorr(basedata=data1, dyadId="couple", personId="person", obs_name="dial", dist_name="female")
fix(crossCorr)
lagTemp <- as.numeric(unlist(crossCorr$maxLag))
lag <- ifelse(lag == 0, 1, lag)
lagTemp
type(lagTemp)
typeof(lagTemp)
lag <- ifelse(lag = 0, 1, lag)
lag <- ifelse(lagTemp == 0, 1, lagTemp)
lag
length(lag)
pID <- unique(factor(basedata$person))
length(pID)
for (i in 1:length(pID)){#
lagi <- lag[i]#
test <- suppressMessages(DataCombine::slide(basedata, Var="obs_deTrend", GroupVar="id", NewVar="obs_deTrend_Lag", slideBy= -lagi))#
}
for (i in 1:length(pID)){#
lagi <- lag[i]#
test <- suppressMessages(DataCombine::slide(basedata, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= -lagi))#
}
fix(test)
lag[3]
lag[1]
i <- 2
lagi <- lag[i]
lagi
test <- suppressMessages(DataCombine::slide(basedata, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= -lagi))
test
dID <- unique(factor(basedata$dyad))
lagi <- lag[i]#
datai <- basedata[baseddata$dyad == dID[i], ]
datai <- basedata[basedata$dyad == dID[i], ]
test <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= -lagi))
lagi
head(datai)
data1 <- rties_ExampleData_2
Max_Min_CCF_Signed <- function (a, b) {#
d <- ccf(a, b, plot = FALSE, na.action=na.exclude)#
cor = d$acf[ ,,1] #
lag = d$lag[ ,,1] #
res = data.frame(cor,lag) #
for(i in 1:nrow(res)) if(is.na(res[i,1])) max=NA else {#
res_max = res[which.max(res$cor),] #
res_min = res[which.min(res$cor),]#
res_min_abs = abs(res_min)#
res.max.abs = which.max(c(res_max$cor, res_min_abs$cor))#
if (res.max.abs==1) max=res_max else max=res_min}#
output <<-data.frame(max = max)#
output#
}
makeCrossCorr <- function(basedata, dyadId, personId, obs_name, dist_name){#
  newdata <- basedata#
  colnames(newdata)[colnames(newdata)== dyadId] <- "dyad"#
  colnames(newdata)[colnames(newdata)== personId] <- "person"#
  colnames(newdata)[colnames(newdata)== obs_name] <- "dv"#
  colnames(newdata)[colnames(newdata)== dist_name ] <- "dist1"#
#
  crossCorr <- list()#
  dID <- unique(factor(newdata$dyad))#
#
  for (i in 1:length(dID)){#
  datai <- newdata[newdata$dyad == dID[i], ]#
  dist1 <- subset(datai, dist1==1, select=dv)#
  dist0 <- subset(datai, dist1==0, select=dv)#
  crossCorr[[i]] <- Max_Min_CCF_Signed(dist0, dist1)#
  }#
#
  cc1 <- lapply(crossCorr, function(x) lapply(x, function(x) ifelse(is.null(x), NA, x)))#
  cc2 <- lapply(cc1, function(x) lapply(x, function(x) ifelse(is.numeric(x), round(x,digits=3), x)))#
  cc <- as.data.frame(do.call(rbind, crossCorr))#
  cc$newID <- dID#
  colnames(cc) <- c("maxCor","maxLag", dyadId)#
  temp1 <- basedata[!duplicated(basedata$person), ]#
  temp2 <- plyr::join(cc, temp1)#
  crossCorr <- temp2#
  return(crossCorr)#
 }
crossCorr <- makeCrossCorr(basedata=data1, dyadId="couple", personId="person", obs_name="dial", dist_name="female")
fix(crossCorr)
lagTemp <- as.numeric(unlist(crossCorr$maxLag))
lag <- ifelse(lagTemp == 0, 1, lagTemp)
lag
dID <- unique(factor(basedata$dyad))
dID <- unique(factor(data1$dyad))
i <- 2
lagi <- lag[i]
lagi
datai <- basedata[basedata$dyad == dID[i], ]
basedata <- data1
dID <- unique(factor(basedata$dyad))
lagi <- lag[i]
datai <- basedata[basedata$dyad == dID[i], ]
head(datai)
dID
dID <- unique(factor(basedata$couple))
dID
datai <- basedata[basedata$dyad == dID[i], ]
head(datai)
data1 <- rties_ExampleData_2
Max_Min_CCF_Signed <- function (a, b) {#
d <- ccf(a, b, plot = FALSE, na.action=na.exclude)#
cor = d$acf[ ,,1] #
lag = d$lag[ ,,1] #
res = data.frame(cor,lag) #
for(i in 1:nrow(res)) if(is.na(res[i,1])) max=NA else {#
res_max = res[which.max(res$cor),] #
res_min = res[which.min(res$cor),]#
res_min_abs = abs(res_min)#
res.max.abs = which.max(c(res_max$cor, res_min_abs$cor))#
if (res.max.abs==1) max=res_max else max=res_min}#
output <<-data.frame(max = max)#
output#
}
makeCrossCorr <- function(basedata, dyadId, personId, obs_name, dist_name){#
  newdata <- basedata#
  colnames(newdata)[colnames(newdata)== dyadId] <- "dyad"#
  colnames(newdata)[colnames(newdata)== personId] <- "person"#
  colnames(newdata)[colnames(newdata)== obs_name] <- "dv"#
  colnames(newdata)[colnames(newdata)== dist_name ] <- "dist1"#
#
  crossCorr <- list()#
  dID <- unique(factor(newdata$dyad))#
#
  for (i in 1:length(dID)){#
  datai <- newdata[newdata$dyad == dID[i], ]#
  dist1 <- subset(datai, dist1==1, select=dv)#
  dist0 <- subset(datai, dist1==0, select=dv)#
  crossCorr[[i]] <- Max_Min_CCF_Signed(dist0, dist1)#
  }#
#
  cc1 <- lapply(crossCorr, function(x) lapply(x, function(x) ifelse(is.null(x), NA, x)))#
  cc2 <- lapply(cc1, function(x) lapply(x, function(x) ifelse(is.numeric(x), round(x,digits=3), x)))#
  cc <- as.data.frame(do.call(rbind, crossCorr))#
  cc$newID <- dID#
  colnames(cc) <- c("maxCor","maxLag", dyadId)#
  temp1 <- basedata[!duplicated(basedata$person), ]#
  temp2 <- plyr::join(cc, temp1)#
  crossCorr <- temp2#
  return(crossCorr)#
 }
basedata <- data1
i <- 2
crossCorr <- makeCrossCorr(basedata=data1, dyadId="couple", personId="person", obs_name="dial", dist_name="female")
lagTemp <- as.numeric(unlist(crossCorr$maxLag))#
lag <- ifelse(lagTemp == 0, 1, lagTemp)
lag
names(basedata)
dID <- unique(factor(basedata$couple))
dID
lagi <- lag[i]
lagi
datai <- basedata[basedata$couple == dID[i], ]
head(datai)
test <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= -lagi))
head(test)
for (i in 1:length(dID)){#
lagi <- lag[i]#
datai <- basedata[basedata$couple == dID[i], ]#
test <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= -lagi))#
}
head(test)
fix(test)
for (i in 1:length(dID)){#
lagi <- lag[i]#
datai <- basedata[basedata$couple == dID[i], ]#
test[i] <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= -lagi))#
}
lagi <- lag[i]
datai <- basedata[basedata$couple == dID[i], ]
test[i] <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= -lagi))
test <- list()
for (i in 1:length(dID)){#
lagi <- lag[i]#
datai <- basedata[basedata$couple == dID[i], ]#
test[i] <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= -lagi))#
}
warnings()
fix(test)
for (i in 1:length(dID)){#
lagi <- lag[i]#
datai <- basedata[basedata$couple == dID[i], ]#
test[i] <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= lagi))#
}
lagi <- lag[i]
lagi
i <- 2
lagi <- lag[i]
lagi
datai <- basedata[basedata$couple == dID[i], ]
head(datai)
test <- list()
test[i] <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= lagi))
test[i] <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= -lagi))
lag
test[i] <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= 4))
test
test[i] <- suppressMessages(DataCombine::slide(datai, Var="dial", NewVar="dial_Lag", slideBy= 4))
test[i]
fix(datai)
test[i] <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= -4))
names(datai)
datai[i] <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= -1))
head(datai)
datai <- basedata[basedata$couple == dID[i], ]
head(datai)
datai <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= -1))
head(datai)
lagi <- lag[i]
lagi
datai <- basedata[basedata$couple == dID[i], ]
datai <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= -1))
datai <- basedata[basedata$couple == dID[i], ]
datai <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= lagi))
head(datai)
datai <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= "lagi"))
datai <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= 4))
head(datai)
fix(datai)
data1 <- rties_ExampleData_2
Max_Min_CCF_Signed <- function (a, b) {#
d <- ccf(a, b, plot = FALSE, na.action=na.exclude)#
cor = d$acf[ ,,1] #
lag = d$lag[ ,,1] #
res = data.frame(cor,lag) #
for(i in 1:nrow(res)) if(is.na(res[i,1])) max=NA else {#
res_max = res[which.max(res$cor),] #
res_min = res[which.min(res$cor),]#
res_min_abs = abs(res_min)#
res.max.abs = which.max(c(res_max$cor, res_min_abs$cor))#
if (res.max.abs==1) max=res_max else max=res_min}#
output <<-data.frame(max = max)#
output#
}#
#
basedata <- data1
makeCrossCorr <- function(basedata, dyadId, personId, obs_name, dist_name){#
  newdata <- basedata#
  colnames(newdata)[colnames(newdata)== dyadId] <- "dyad"#
  colnames(newdata)[colnames(newdata)== personId] <- "person"#
  colnames(newdata)[colnames(newdata)== obs_name] <- "dv"#
  colnames(newdata)[colnames(newdata)== dist_name ] <- "dist1"#
#
  crossCorr <- list()#
  dID <- unique(factor(newdata$dyad))#
#
  for (i in 1:length(dID)){#
  datai <- newdata[newdata$dyad == dID[i], ]#
  dist1 <- subset(datai, dist1==1, select=dv)#
  dist0 <- subset(datai, dist1==0, select=dv)#
  crossCorr[[i]] <- Max_Min_CCF_Signed(dist0, dist1)#
  }#
#
  cc1 <- lapply(crossCorr, function(x) lapply(x, function(x) ifelse(is.null(x), NA, x)))#
  cc2 <- lapply(cc1, function(x) lapply(x, function(x) ifelse(is.numeric(x), round(x,digits=3), x)))#
  cc <- as.data.frame(do.call(rbind, crossCorr))#
  cc$newID <- dID#
  colnames(cc) <- c("maxCor","maxLag", dyadId)#
  temp1 <- basedata[!duplicated(basedata$person), ]#
  temp2 <- plyr::join(cc, temp1)#
  crossCorr <- temp2#
  return(crossCorr)#
 }
crossCorr <- makeCrossCorr(basedata=data1, dyadId="couple", personId="person", obs_name="dial", dist_name="female")
lagTemp <- as.numeric(unlist(crossCorr$maxLag))#
lag <- ifelse(lagTemp == 0, 1, lagTemp)#
#
dID <- unique(factor(basedata$couple))#
#
lagData <- list()
for (i in 1:length(dID)){#
lagi <- lag[i]#
datai <- basedata[basedata$couple == dID[i], ]#
datai <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= lagi))#
lagData[i] <- datai#
}
warnings()
head(datai)
lag
head(lagData)
lagData <- list()
dID
for (i in 1:length(dID)){#
lagi <- lag[i]#
datai <- basedata[basedata$couple == dID[i], ]#
datai <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= lagi))#
lagData[i] <- datai#
}
head(datai)
fix(datai)
lagi
lag
fix(lag)
crossCorr <- makeCrossCorr(basedata=data1, dyadId="couple", personId="person", obs_name="dial", dist_name="female")
lagTemp <- as.numeric(unlist(crossCorr$maxLag))#
lag <- ifelse(lagTemp == 0, 1, lagTemp)
length(crossCorr)
dim(crossCorr)
length(lag)
dID <- unique(factor(basedata$couple))
length(dID)
i <- 3
lagData <- list()
lagi <- lag[i]
lagi
datai <- basedata[basedata$couple == dID[i], ]
head(datai)
datai <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= lagi))
head(datai)
fix(datai)
lagData[i] <- datai
lagData[[i]] <- datai
lagData
fix(lagData)
data1 <- rties_ExampleData_2
Max_Min_CCF_Signed <- function (a, b) {#
d <- ccf(a, b, plot = FALSE, na.action=na.exclude)#
cor = d$acf[ ,,1] #
lag = d$lag[ ,,1] #
res = data.frame(cor,lag) #
for(i in 1:nrow(res)) if(is.na(res[i,1])) max=NA else {#
res_max = res[which.max(res$cor),] #
res_min = res[which.min(res$cor),]#
res_min_abs = abs(res_min)#
res.max.abs = which.max(c(res_max$cor, res_min_abs$cor))#
if (res.max.abs==1) max=res_max else max=res_min}#
output <<-data.frame(max = max)#
output#
}#
#
basedata <- data1
makeCrossCorr <- function(basedata, dyadId, personId, obs_name, dist_name){#
  newdata <- basedata#
  colnames(newdata)[colnames(newdata)== dyadId] <- "dyad"#
  colnames(newdata)[colnames(newdata)== personId] <- "person"#
  colnames(newdata)[colnames(newdata)== obs_name] <- "dv"#
  colnames(newdata)[colnames(newdata)== dist_name ] <- "dist1"#
#
  crossCorr <- list()#
  dID <- unique(factor(newdata$dyad))#
#
  for (i in 1:length(dID)){#
  datai <- newdata[newdata$dyad == dID[i], ]#
  dist1 <- subset(datai, dist1==1, select=dv)#
  dist0 <- subset(datai, dist1==0, select=dv)#
  crossCorr[[i]] <- Max_Min_CCF_Signed(dist0, dist1)#
  }#
#
  cc1 <- lapply(crossCorr, function(x) lapply(x, function(x) ifelse(is.null(x), NA, x)))#
  cc2 <- lapply(cc1, function(x) lapply(x, function(x) ifelse(is.numeric(x), round(x,digits=3), x)))#
  cc <- as.data.frame(do.call(rbind, crossCorr))#
  cc$newID <- dID#
  colnames(cc) <- c("maxCor","maxLag", dyadId)#
  temp1 <- basedata[!duplicated(basedata$person), ]#
  temp2 <- plyr::join(cc, temp1)#
  crossCorr <- temp2#
  return(crossCorr)#
 }
crossCorr <- makeCrossCorr(basedata=data1, dyadId="couple", personId="person", obs_name="dial", dist_name="female")
lagTemp <- as.numeric(unlist(crossCorr$maxLag))#
lag <- ifelse(lagTemp == 0, 1, lagTemp)#
#
dID <- unique(factor(basedata$couple))
lagData <- list()
for (i in 1:length(dID)){#
lagi <- lag[i]#
datai <- basedata[basedata$couple == dID[i], ]#
datai <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= lagi))#
lagData[[i]] <- datai#
}
lagData <- as.data.frame(do.call(rbind, lagData))
fix(lagData)
lag
fix(lagData)
dID
fix(lagData)
i <- 4
lagi <- lag[i]
lagi
lag <- ifelse(lagTemp == 0, 1, lagTemp)
lag
pID  <- unique(factor(basedata$person))
lagTemp <- as.numeric(unlist(crossCorr$maxLag))
head(lagTemp)
head(crossCorr)
cc <- crossCorr[unique(crossCorr$couple), ]
head(cc)
cc <- crossCorr[!duplicated(crossCorr$couple), ]
head(cc)
lagTemp <- as.numeric(unlist(cc$maxLag))
lag <- ifelse(lagTemp == 0, 1, lagTemp)
dID <- unique(factor(basedata$couple))
lagData <- list()
for (i in 1:length(dID)){#
lagi <- lag[i]#
datai <- basedata[basedata$couple == dID[i], ]#
datai <- suppressMessages(DataCombine::slide(datai, Var="dial", GroupVar="person", NewVar="dial_Lag", slideBy= lagi))#
lagData[[i]] <- datai#
}
head(lagData)
lagData <- as.data.frame(do.call(rbind, lagData))
fix(lagData)
lag
data1 <- rties_ExampleData_2
Max_Min_CCF_Signed <- function (a, b) {#
d <- ccf(a, b, plot = FALSE, na.action=na.exclude)#
cor = d$acf[ ,,1] #
lag = d$lag[ ,,1] #
res = data.frame(cor,lag) #
for(i in 1:nrow(res)) if(is.na(res[i,1])) max=NA else {#
res_max = res[which.max(res$cor),] #
res_min = res[which.min(res$cor),]#
res_min_abs = abs(res_min)#
res.max.abs = which.max(c(res_max$cor, res_min_abs$cor))#
if (res.max.abs==1) max=res_max else max=res_min}#
output <<-data.frame(max = max)#
output#
}
makeCrossCorr <- function(basedata, dyadId, personId, obs_name, dist_name){#
  newdata <- basedata#
  colnames(newdata)[colnames(newdata)== dyadId] <- "dyad"#
  colnames(newdata)[colnames(newdata)== personId] <- "person"#
  colnames(newdata)[colnames(newdata)== obs_name] <- "dv"#
  colnames(newdata)[colnames(newdata)== dist_name ] <- "dist1"#
#
  crossCorr <- list()#
  dID <- unique(factor(newdata$dyad))#
#
  for (i in 1:length(dID)){#
  datai <- newdata[newdata$dyad == dID[i], ]#
  dist1 <- subset(datai, dist1==1, select=dv)#
  dist0 <- subset(datai, dist1==0, select=dv)#
  crossCorr[[i]] <- Max_Min_CCF_Signed(dist0, dist1)#
  }#
#
  cc1 <- lapply(crossCorr, function(x) lapply(x, function(x) ifelse(is.null(x), NA, x)))#
  cc2 <- lapply(cc1, function(x) lapply(x, function(x) ifelse(is.numeric(x), round(x,digits=3), x)))#
  cc <- as.data.frame(do.call(rbind, crossCorr))#
  cc$newID <- dID#
  colnames(cc) <- c("maxCor","maxLag", dyadId)#
  temp1 <- basedata[!duplicated(basedata$person), ]#
  temp2 <- plyr::join(cc, temp1)#
  crossCorr <- temp2#
  return(crossCorr)#
 }
dataPrep <- function(basedata, dyadId, personId, obs_name, dist_name, time_name, time_lag=NULL){#
  vars <- c(dyadId, personId, obs_name, dist_name, time_name)#
  basedata <- basedata[vars]#
  names(basedata) <- c("dyad","id","obs","dist1","time")#
      # check distinguishing variable is numeric #
  if (!is.numeric(basedata$dist1)){#
	stop("the distinguishing variable must be a 0/1 numeric variable")#
  }#
#
  # create the dist0 variable#
  basedata$dist0 <- ifelse(basedata$dist1 == 1, 0, 1)#
  # check partners have same number of observations #
  notEqual <- vector()#
  t <- table(basedata$dist1, basedata$dyad)#
  for(i in 1:ncol(t)){		#
    if (t[1,i] != t[2,i]){#
	notEqual <- append(notEqual, as.numeric(dimnames(t)[[2]][i]))#
	}#
  }				#
	if (length(notEqual) > 0){#
	  print(notEqual)#
	  stop("the partners in these dyads have unequal number of observations")#
      rm(notEqual, envir = .GlobalEnv)#
	}#
  # center each person's data around their own regression line#
  basedata <- lineCenterById(basedata)#
  # create lagged variables#
  if(!is.null(time_lag)){#
	lag <- time_lag#
	  if(lag == 0){#
	   crossCorr <- makeCrossCorr(basedata=data1, dyadId="dyad", personId="id", obs_name="obs_deTrend", dist_name="dist1")#
	   cc <- crossCorr[!duplicated(crossCorr$dyad), ]#
       lagTemp <- as.numeric(unlist(cc$maxLag))#
       lag <- ifelse(lagTemp == 0, 1, lagTemp)#
#
       dID <- unique(factor(basedata$dyad))#
       lagData <- list()#
#
       for (i in 1:length(dID)){#
         lagi <- lag[i]#
         datai <- basedata[basedata$dyad == dID[i], ]#
         datai <- suppressMessages(DataCombine::slide(datai, Var="obs_deTrend", GroupVar="id", NewVar="obs_deTrend_Lag", slideBy= lagi))#
         lagData[[i]] <- datai#
       }#
         basedata <- as.data.frame(do.call(rbind, lagData))#
#
       } else {#
	       basedata <- suppressMessages(DataCombine::slide(basedata, Var="obs_deTrend", GroupVar="id", NewVar="obs_deTrend_Lag", slideBy= -lag))#
  }#
  # put data in actor-partner format#
  basedata <- actorPartnerDataTime(basedata, "dyad", "id")  #
  return(basedata)#
}#
lineCenterById <- function(basedata)#
{#
  newId <- unique(factor(basedata$id))#
  dataCent <- list()#
  for(i in 1:length(newId)){#
	datai <- basedata[basedata$id == newId[i],]#
	datai$obs_deTrend <- resid(lm(obs ~ time, data=datai, na.action=na.exclude))#
	dataCent[[i]] <- datai#
  }		#
  basedata <- as.data.frame(do.call(rbind, dataCent)) 	#
}		#
#
actorPartnerDataTime <- function(basedata, dyadId, personId){#
    basedata$d <- basedata[, dyadId]#
    basedata$p <- basedata[, personId]#
    basedata <- basedata[order(basedata$p), ]#
    dID <- unique(factor(basedata$d))#
	dataAP <- list()#
#
	for(i in 1:length(dID))#
		{#
		datai <- basedata[basedata$d == dID[i],]#
		dataA <- datai#
		P1 <- subset(datai, datai$d == datai$p)#
		P2 <- subset(datai, datai$d != datai$p)#
		P1_part <- P2#
		P2_part <- P1#
		colnames(P1_part) <- paste("p", colnames(P1_part), sep="_")#
		colnames(P2_part) <- paste("p", colnames(P2_part), sep="_")#
		dataP <- rbind(P1_part, P2_part)#
		APi <- cbind(dataA, dataP)#
		APi <- subset(APi, select=-c(d, p, p_d, p_p))#
		dataAP[[i]] <- APi		#
		}		#
	dataAP <- as.data.frame(do.call(rbind, dataAP))#
}
}}
data1 <- rties_ExampleData_2
Max_Min_CCF_Signed <- function (a, b) {#
d <- ccf(a, b, plot = FALSE, na.action=na.exclude)#
cor = d$acf[ ,,1] #
lag = d$lag[ ,,1] #
res = data.frame(cor,lag) #
for(i in 1:nrow(res)) if(is.na(res[i,1])) max=NA else {#
res_max = res[which.max(res$cor),] #
res_min = res[which.min(res$cor),]#
res_min_abs = abs(res_min)#
res.max.abs = which.max(c(res_max$cor, res_min_abs$cor))#
if (res.max.abs==1) max=res_max else max=res_min}#
output <<-data.frame(max = max)#
output#
}
makeCrossCorr <- function(basedata, dyadId, personId, obs_name, dist_name){#
  newdata <- basedata#
  colnames(newdata)[colnames(newdata)== dyadId] <- "dyad"#
  colnames(newdata)[colnames(newdata)== personId] <- "person"#
  colnames(newdata)[colnames(newdata)== obs_name] <- "dv"#
  colnames(newdata)[colnames(newdata)== dist_name ] <- "dist1"#
#
  crossCorr <- list()#
  dID <- unique(factor(newdata$dyad))#
#
  for (i in 1:length(dID)){#
  datai <- newdata[newdata$dyad == dID[i], ]#
  dist1 <- subset(datai, dist1==1, select=dv)#
  dist0 <- subset(datai, dist1==0, select=dv)#
  crossCorr[[i]] <- Max_Min_CCF_Signed(dist0, dist1)#
  }#
#
  cc1 <- lapply(crossCorr, function(x) lapply(x, function(x) ifelse(is.null(x), NA, x)))#
  cc2 <- lapply(cc1, function(x) lapply(x, function(x) ifelse(is.numeric(x), round(x,digits=3), x)))#
  cc <- as.data.frame(do.call(rbind, crossCorr))#
  cc$newID <- dID#
  colnames(cc) <- c("maxCor","maxLag", dyadId)#
  temp1 <- basedata[!duplicated(basedata$person), ]#
  temp2 <- plyr::join(cc, temp1)#
  crossCorr <- temp2#
  return(crossCorr)#
 }
lineCenterById <- function(basedata)#
{#
  newId <- unique(factor(basedata$id))#
  dataCent <- list()#
  for(i in 1:length(newId)){#
	datai <- basedata[basedata$id == newId[i],]#
	datai$obs_deTrend <- resid(lm(obs ~ time, data=datai, na.action=na.exclude))#
	dataCent[[i]] <- datai#
  }		#
  basedata <- as.data.frame(do.call(rbind, dataCent)) 	#
}
actorPartnerDataTime <- function(basedata, dyadId, personId){#
    basedata$d <- basedata[, dyadId]#
    basedata$p <- basedata[, personId]#
    basedata <- basedata[order(basedata$p), ]#
    dID <- unique(factor(basedata$d))#
	dataAP <- list()#
#
	for(i in 1:length(dID))#
		{#
		datai <- basedata[basedata$d == dID[i],]#
		dataA <- datai#
		P1 <- subset(datai, datai$d == datai$p)#
		P2 <- subset(datai, datai$d != datai$p)#
		P1_part <- P2#
		P2_part <- P1#
		colnames(P1_part) <- paste("p", colnames(P1_part), sep="_")#
		colnames(P2_part) <- paste("p", colnames(P2_part), sep="_")#
		dataP <- rbind(P1_part, P2_part)#
		APi <- cbind(dataA, dataP)#
		APi <- subset(APi, select=-c(d, p, p_d, p_p))#
		dataAP[[i]] <- APi		#
		}		#
	dataAP <- as.data.frame(do.call(rbind, dataAP))#
}
dataPrep <- function(basedata, dyadId, personId, obs_name, dist_name, time_name, time_lag=NULL){#
  vars <- c(dyadId, personId, obs_name, dist_name, time_name)#
  basedata <- basedata[vars]#
  names(basedata) <- c("dyad","id","obs","dist1","time")#
      # check distinguishing variable is numeric #
  if (!is.numeric(basedata$dist1)){#
	stop("the distinguishing variable must be a 0/1 numeric variable")#
  }#
#
  # create the dist0 variable#
  basedata$dist0 <- ifelse(basedata$dist1 == 1, 0, 1)#
  # check partners have same number of observations #
  notEqual <- vector()#
  t <- table(basedata$dist1, basedata$dyad)#
  for(i in 1:ncol(t)){		#
    if (t[1,i] != t[2,i]){#
	notEqual <- append(notEqual, as.numeric(dimnames(t)[[2]][i]))#
	}#
  }				#
	if (length(notEqual) > 0){#
	  print(notEqual)#
	  stop("the partners in these dyads have unequal number of observations")#
      rm(notEqual, envir = .GlobalEnv)#
	}#
  # center each person's data around their own regression line#
  basedata <- lineCenterById(basedata)#
  # create lagged variables#
  if(!is.null(time_lag)){#
	lag <- time_lag#
	  if(lag == 0){#
	   crossCorr <- makeCrossCorr(basedata=data1, dyadId="dyad", personId="id", obs_name="obs_deTrend", dist_name="dist1")#
	   cc <- crossCorr[!duplicated(crossCorr$dyad), ]#
       lagTemp <- as.numeric(unlist(cc$maxLag))#
       lag <- ifelse(lagTemp == 0, 1, lagTemp)#
#
       dID <- unique(factor(basedata$dyad))#
       lagData <- list()#
#
       for (i in 1:length(dID)){#
         lagi <- lag[i]#
         datai <- basedata[basedata$dyad == dID[i], ]#
         datai <- suppressMessages(DataCombine::slide(datai, Var="obs_deTrend", GroupVar="id", NewVar="obs_deTrend_Lag", slideBy= lagi))#
         lagData[[i]] <- datai#
       }#
         basedata <- as.data.frame(do.call(rbind, lagData))#
#
       } else {#
	       basedata <- suppressMessages(DataCombine::slide(basedata, Var="obs_deTrend", GroupVar="id", NewVar="obs_deTrend_Lag", slideBy= -lag))#
	  }#
   }#
  # put data in actor-partner format#
  basedata <- actorPartnerDataTime(basedata, "dyad", "id")  #
  return(basedata)#
}
test <- dataPrep(basedata=data1, dyadId="couple", personId="person", obs_name="dial", dist_name="female", time_name="time", time_lag=0)
names(data1)
basedata <- data1#
dyadId <- "couple"#
personId <- "person"#
obs_name <- "dial"#
dist_name <- "female"#
time_name <- "time"#
time_lag <- 0
vars <- c(dyadId, personId, obs_name, dist_name, time_name)
basedata <- basedata[vars]
head(basedata)
names(basedata) <- c("dyad","id","obs","dist1","time")
basedata$dist0 <- ifelse(basedata$dist1 == 1, 0, 1)
head(basedata)
basedata <- lineCenterById(basedata)
head(basedata)
lag <- time_lag
lag
if(lag == 0){#
	   crossCorr <- makeCrossCorr(basedata=data1, dyadId="dyad", personId="id", obs_name="obs_deTrend", dist_name="dist1")#
	   cc <- crossCorr[!duplicated(crossCorr$dyad), ]#
       lagTemp <- as.numeric(unlist(cc$maxLag))#
       lag <- ifelse(lagTemp == 0, 1, lagTemp)#
#
       dID <- unique(factor(basedata$dyad))#
       lagData <- list()#
#
       for (i in 1:length(dID)){#
         lagi <- lag[i]#
         datai <- basedata[basedata$dyad == dID[i], ]#
         datai <- suppressMessages(DataCombine::slide(datai, Var="obs_deTrend", GroupVar="id", NewVar="obs_deTrend_Lag", slideBy= lagi))#
         lagData[[i]] <- datai#
       }
if(lag == 0){#
	   crossCorr <- makeCrossCorr(basedata=data1, dyadId="dyad", personId="id", obs_name="obs_deTrend", dist_name="dist1")#
	   cc <- crossCorr[!duplicated(crossCorr$dyad), ]#
       lagTemp <- as.numeric(unlist(cc$maxLag))#
       lag <- ifelse(lagTemp == 0, 1, lagTemp)#
#
       dID <- unique(factor(basedata$dyad))#
       lagData <- list()#
#
       for (i in 1:length(dID)){#
         lagi <- lag[i]#
         datai <- basedata[basedata$dyad == dID[i], ]#
         datai <- suppressMessages(DataCombine::slide(datai, Var="obs_deTrend", GroupVar="id", NewVar="obs_deTrend_Lag", slideBy= lagi))#
         lagData[[i]] <- datai#
       }#
         basedata <- as.data.frame(do.call(rbind, lagData))#
#
       }
lag <- time_lag
||
devtools::install_github("ebmtnprof/rties", force=T)
